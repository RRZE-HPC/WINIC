from matplotlib import pyplot as plt
import numpy as np
import parse_master_3000 as pm


def primedFunctio():
    # without primed function
    data = np.array(
        [
            [0.549, 0.540, 0.540, 0.541, 0.551, 0.546, 0.547, 0.543, 0.554, 0.543],
            [0.548, 0.541, 0.541, 0.559, 0.544, 0.540, 0.540, 0.540, 0.541, 0.552],
            [0.548, 0.545, 0.541, 0.541, 0.540, 0.542, 0.541, 0.540, 0.567, 0.543],
            [0.542, 0.541, 0.541, 0.545, 0.556, 0.550, 0.549, 0.540, 0.541, 0.551],
            [0.550, 0.551, 0.545, 0.540, 0.544, 0.540, 0.540, 0.545, 0.541, 0.549],
            [0.545, 0.545, 0.551, 0.541, 0.556, 0.540, 0.546, 0.546, 0.568, 0.546],
            [0.541, 0.551, 0.541, 0.541, 0.566, 0.552, 0.541, 0.541, 0.541, 0.551],
            [0.551, 0.542, 0.547, 0.541, 0.542, 0.542, 0.546, 0.541, 0.542, 0.546],
            [0.548, 0.541, 0.547, 0.542, 0.542, 0.542, 0.579, 0.542, 0.543, 0.542],
            [0.548, 0.554, 0.540, 0.541, 0.550, 0.541, 0.540, 0.540, 0.541, 0.541],
        ]
    )

    # with primed fuction
    data2 = np.array(
        [
            [0.554, 0.542, 0.546, 0.542, 0.543, 0.542, 0.541, 0.561, 0.545, 0.542],
            [0.542, 0.545, 0.542, 0.554, 0.541, 0.542, 0.540, 0.543, 0.549, 0.541],
            [0.541, 0.544, 0.547, 0.541, 0.547, 0.541, 0.541, 0.540, 0.541, 0.543],
            [0.565, 0.542, 0.541, 0.551, 0.542, 0.541, 0.546, 0.543, 0.540, 0.543],
            [0.544, 0.541, 0.544, 0.541, 0.544, 0.544, 0.540, 0.551, 0.541, 0.540],
            [0.541, 0.541, 0.541, 0.541, 0.556, 0.541, 0.541, 0.545, 0.541, 0.541],
            [0.559, 0.545, 0.540, 0.540, 0.546, 0.542, 0.540, 0.547, 0.540, 0.541],
            [0.542, 0.550, 0.554, 0.542, 0.549, 0.543, 0.540, 0.544, 0.546, 0.541],
            [0.540, 0.540, 0.541, 0.541, 0.540, 0.541, 0.550, 0.542, 0.547, 0.541],
            [0.544, 0.540, 0.541, 0.548, 0.545, 0.541, 0.541, 0.540, 0.541, 0.540],
        ]
    )

    plt.scatter(range(0, 10), np.mean(data, axis=0))
    plt.scatter(range(0, 10), np.mean(data2, axis=0))
    # no difference between the first and successive function calls
    # for row in data2:
    #     plt.scatter(range(0,10), row)

    plt.show()


def adc():
    freq = 3.75
    N = 1000000
    points_even = [
        (12, 1014),
        (24, 3771),
        (36, 6937),
        (48, 10326),
        (60, 13349),
        (72, 16506),
        (84, 19783),
    ]
    points = [
        (25, 6757),
        (26, 6854),
        (27, 7022),
        (28, 7018),
        (29, 6840),
        (30, 6870),
        (31, 7006),
        (32, 6945),
        (33, 6779),
        (34, 6763),
        (35, 6936),
        (13, 3778),
        (14, 3544),
        (15, 3753),
        (16, 3706),
        (17, 3538),
        (18, 3556),
        (19, 3721),
        (20, 3729),
        (21, 3735),
        (22, 3502),
        (23, 3728),
    ]
    points2 = [
        (6, 590),
        (7, 1884),
        (8, 1888),
        (9, 2155),
        (10, 2084),
        (11, 1921),
        (12, 1896),
        (18, 3558),
        (24, 5153),
        (30, 6769),
    ]
    adc_problem1 = [
        (1, 0.997),
        (2, 0.499),
        (3, 0.333),
        (4, 0.500),
        (5, 0.400),
        (6, 0.351),
        (7, 0.286),
        (8, 0.360),
        (9, 0.333),
        (10, 0.321),
        (11, 0.273),
        (12, 0.315),
        (13, 1.010),
        (14, 0.936),
        (15, 0.932),
        (16, 0.893),
        (17, 0.780),
        (18, 0.738),
        (19, 0.737),
        (20, 0.695),
        (21, 0.625),
        (22, 0.596),
        (23, 0.605),
        (24, 0.588),
        (25, 1.011),
        (26, 0.972),
        (27, 0.976),
        (28, 0.940),
        (29, 0.871),
        (30, 0.844),
        (31, 0.842),
        (32, 0.810),
        (33, 0.766),
        (34, 0.745),
        (35, 0.743),
        (36, 0.722),
        (37, 1.011),
        (38, 0.985),
        (39, 0.976),
        (40, 0.963),
        (41, 0.924),
        (42, 0.893),
        (43, 0.883),
        (44, 0.874),
        (45, 0.845),
        (46, 0.813),
        (47, 0.806),
        (48, 0.799),
        (49, 1.012),
        (50, 0.995),
        (51, 0.981),
        (52, 0.973),
        (53, 0.943),
        (54, 0.919),
        (55, 0.914),
        (56, 0.902),
        (57, 0.878),
        (58, 0.857),
        (59, 0.850),
        (60, 0.827),
    ]

    adc_problem2 = [
        (1, 0.997),
        (2, 0.499),
        (3, 0.334),
        (4, 0.500),
        (5, 0.400),
        (6, 0.352),
        (7, 0.286),
        (8, 0.360),
        (9, 0.334),
        (10, 0.321),
        (11, 0.273),
        (12, 0.315),
        (13, 1.009),
        (14, 0.940),
        (15, 0.938),
        (16, 0.891),
        (17, 0.781),
        (18, 0.739),
        (19, 0.735),
        (20, 0.699),
        (21, 0.624),
        (22, 0.596),
        (23, 0.605),
        (24, 0.588),
        (25, 1.012),
        (26, 0.974),
        (27, 0.977),
        (28, 0.938),
        (29, 0.871),
        (30, 0.842),
        (31, 0.845),
        (32, 0.814),
        (33, 0.767),
        (34, 0.744),
        (35, 0.745),
        (36, 0.720),
        (37, 1.015),
        (38, 0.987),
        (39, 0.976),
        (40, 0.964),
        (41, 0.927),
        (42, 0.894),
        (43, 0.886),
        (44, 0.875),
        (45, 0.846),
        (46, 0.816),
        (47, 0.809),
        (48, 0.803),
        (49, 1.012),
        (50, 0.992),
        (51, 0.986),
        (52, 0.975),
        (53, 0.948),
        (54, 0.919),
        (55, 0.911),
        (56, 0.903),
        (57, 0.881),
        (58, 0.856),
        (59, 0.849),
        (60, 0.830),
    ]
    add_equivalent = [
        (1, 0.997),
        (2, 0.499),
        (3, 0.333),
        (4, 0.315),
        (5, 0.300),
        (6, 0.294),
        (7, 0.286),
        (8, 0.288),
        (9, 0.278),
        (10, 0.280),
        (11, 0.273),
        (12, 0.278),
        (13, 0.273),
        (14, 0.271),
        (15, 0.269),
        (16, 0.270),
        (17, 0.267),
        (18, 0.270),
        (19, 0.265),
        (20, 0.272),
        (21, 0.269),
        (22, 0.265),
        (23, 0.262),
        (24, 0.262),
        (25, 0.262),
        (26, 0.261),
        (27, 0.262),
        (28, 0.262),
        (29, 0.261),
        (30, 0.270),
        (31, 0.260),
        (32, 0.262),
        (33, 0.265),
        (34, 0.267),
        (35, 0.260),
        (36, 0.262),
        (37, 0.264),
        (38, 0.266),
        (39, 0.259),
        (40, 0.266),
        (41, 0.260),
        (42, 0.264),
        (43, 0.260),
        (44, 0.265),
        (45, 0.259),
        (46, 0.264),
        (47, 0.259),
        (48, 0.264),
        (49, 0.258),
        (50, 0.263),
        (51, 0.257),
        (52, 0.262),
        (53, 0.256),
        (54, 0.264),
        (55, 0.258),
        (56, 0.262),
        (57, 0.258),
        (58, 0.265),
        (59, 0.258),
        (60, 0.270),
    ]

    adc_clear_genoa = [
        (1, 0.947),
        (2, 0.473),
        (3, 0.421),
        (4, 0.476),
        (5, 0.381),
        (6, 0.370),
        (7, 0.362),
        (8, 0.356),
        (9, 0.352),
        (10, 0.349),
        (11, 0.346),
        (12, 0.344),
        (13, 0.342),
        (14, 0.340),
        (15, 0.338),
        (16, 0.337),
        (17, 0.336),
        (18, 0.335),
        (19, 0.334),
        (20, 0.333),
        (21, 0.332),
        (22, 0.331),
        (23, 0.331),
        (24, 0.330),
        (25, 0.330),
        (26, 0.329),
        (27, 0.329),
        (28, 0.329),
        (29, 0.328),
        (30, 0.328),
        (31, 0.327),
        (32, 0.327),
        (33, 0.327),
        (34, 0.326),
        (35, 0.326),
        (36, 0.326),
        (37, 0.326),
        (38, 0.326),
        (39, 0.325),
        (40, 0.325),
        (41, 0.325),
        (42, 0.325),
        (43, 0.325),
        (44, 0.324),
        (45, 0.324),
        (46, 0.324),
        (47, 0.324),
        (48, 0.324),
        (49, 0.324),
        (50, 0.324),
        (51, 0.323),
        (52, 0.323),
        (53, 0.323),
        (54, 0.323),
        (55, 0.323),
        (56, 0.323),
        (57, 0.323),
        (58, 0.323),
        (59, 0.323),
        (60, 0.322),
    ]

    adc_problem_genoa = [
        (1, 0.947),
        (2, 0.473),
        (3, 0.316),
        (4, 0.476),
        (5, 0.476),
        (6, 0.317),
        (7, 0.272),
        (8, 0.342),
        (9, 0.317),
        (10, 0.288),
        (11, 0.259),
        (12, 0.266),
        (13, 0.952),
        (14, 0.883),
        (15, 0.888),
        (16, 0.776),
        (17, 0.727),
        (18, 0.687),
        (19, 0.701),
        (20, 0.643),
        (21, 0.589),
        (22, 0.562),
        (23, 0.579),
        (24, 0.521),
        (25, 0.951),
        (26, 0.915),
        (27, 0.916),
        (28, 0.853),
        (29, 0.820),
        (30, 0.793),
        (31, 0.798),
        (32, 0.766),
        (33, 0.721),
        (34, 0.700),
        (35, 0.707),
        (36, 0.681),
        (37, 0.951),
        (38, 0.927),
        (39, 0.928),
        (40, 0.892),
        (41, 0.859),
        (42, 0.839),
        (43, 0.841),
        (44, 0.809),
        (45, 0.782),
        (46, 0.765),
        (47, 0.769),
        (48, 0.742),
        (49, 0.951),
        (50, 0.933),
        (51, 0.933),
        (52, 0.899),
        (53, 0.880),
        (54, 0.863),
        (55, 0.865),
        (56, 0.834),
        (57, 0.818),
        (58, 0.804),
        (59, 0.807),
        (60, 0.783),
    ]
    fig, ax1 = plt.subplots()
    # ax2 = ax1.twinx()
    numInst, time = zip(*points)

    for val in adc_clear_genoa:
        numInst, tp = val
        if numInst % 12 == 0:
            ax1.scatter(numInst, tp, c="g")
        else:
            ax1.scatter(numInst, tp, c="b")
    # ax1.scatter(numInst, TPs, c="r")
    # ax1.scatter(numInst_even, TPs_even, c="g")
    plt.title("adc r16 imm, 12 independent instructions, clc after each instruction")
    # plt.title("adc r16 imm, 12 independent instructions")
    plt.xlabel("instructions in loop")
    plt.ylabel("Throughput (cycles/instr)")
    plt.savefig("adc_clear.png")


def ratioStudy(path, inst1, inst2):
    with open("analysis/" + path, "r") as f:
        data = f.read()
    n = 6  # cut away front and back
    ratios = np.array(pm.parse_relative_to(data, "time", 0, -3, "custom", custom_delim=[" "]))[n:-n]
    times = np.array(pm.parse_relative_to(data, "time", 0, 9, "float_exp"), dtype=float)[n:-n]
    tp1 = np.array(pm.parse_relative_to(data, "tp_1", 0, 9, "float_exp"), dtype=float)[n:-n]
    tp2 = np.array(pm.parse_relative_to(data, "tp_2", 0, 9, "float_exp"), dtype=float)[n:-n]
    tp_comb = np.array(pm.parse_relative_to(data, "tp_comb", 0, 9, "float_exp"), dtype=float)[n:-n]
    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()
    ax1.scatter(ratios, tp1, c="g", marker="^")
    ax1.scatter(ratios, tp2, c="orange")
    ax1.scatter(ratios, tp_comb, c="r")
    # ax2.scatter(ratios, times, c="r")

    ax1.axhline(min(tp1), c="g", label=f"TP {inst1}")
    ax1.axhline(min(tp2), c="orange", label=f"TP {inst2}")

    plt.title(f"Throughputs of {inst1}:{inst2} interleaved")
    # plt.xlabel("instructions in loop")
    ax1.set_ylabel("TP (cycles/instruction)")
    # ax2.set_ylabel("Execution Time ()", c="r")
    ax1.tick_params(rotation=45)
    ax1.legend()
    plt.tight_layout()
    plt.savefig(f"analysis/{path}.png")


ratioStudy("ratio_mul_mov.log", "MUL8r", "MOV64ri32")
# ratioStudy("ratio_and_adc.log", "AND16ri8", "ADC16ri8")
# ratioAndStudy()
